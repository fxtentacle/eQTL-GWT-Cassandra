/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.service;

/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */

import java.util.BitSet;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * Basic unit of data within a ColumnFamily.
 * 
 * @param name
 *            . A column name can act both as structure (a label) or as data
 *            (like value). Regardless, the name of the column is used as a key
 *            to its value.
 * @param value
 *            . Some data
 * @param timestamp
 *            . Used to record when data was sent to be written.
 */
public class Column implements TBase, java.io.Serializable, Cloneable, Comparable<Column> {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final TStruct STRUCT_DESC = new TStruct("Column");
	private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short) 1);
	private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short) 2);
	private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short) 3);

	public byte[] name;
	public byte[] value;
	public long timestamp;
	public static final int NAME = 1;
	public static final int VALUE = 2;
	public static final int TIMESTAMP = 3;

	// isset id assignments
	private static final int __TIMESTAMP_ISSET_ID = 0;
	private BitSet __isset_bit_vector = new BitSet(1);

	public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {
		/**
	 * 
	 */
		private static final long serialVersionUID = 1L;

		{
			put(NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, new FieldValueMetaData(TType.STRING)));
			put(VALUE, new FieldMetaData("value", TFieldRequirementType.REQUIRED, new FieldValueMetaData(TType.STRING)));
			put(TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, new FieldValueMetaData(TType.I64)));
		}
	});

	static {
		FieldMetaData.addStructMetaDataMap(Column.class, metaDataMap);
	}

	public Column() {
	}

	public Column(byte[] name, byte[] value, long timestamp) {
		this();
		this.name = name;
		this.value = value;
		this.timestamp = timestamp;
		setTimestampIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Column(Column other) {
		__isset_bit_vector.clear();
		__isset_bit_vector.or(other.__isset_bit_vector);
		if (other.isSetName()) {
			this.name = new byte[other.name.length];
			System.arraycopy(other.name, 0, name, 0, other.name.length);
		}
		if (other.isSetValue()) {
			this.value = new byte[other.value.length];
			System.arraycopy(other.value, 0, value, 0, other.value.length);
		}
		this.timestamp = other.timestamp;
	}

	public Column deepCopy() {
		return new Column(this);
	}

	@Override
	@Deprecated
	public Column clone() {
		return new Column(this);
	}

	public byte[] getName() {
		return this.name;
	}

	public Column setName(byte[] name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	// Returns true if field name is set (has been asigned a value) and false
	// otherwise
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	public byte[] getValue() {
		return this.value;
	}

	public Column setValue(byte[] value) {
		this.value = value;
		return this;
	}

	public void unsetValue() {
		this.value = null;
	}

	// Returns true if field value is set (has been asigned a value) and false
	// otherwise
	public boolean isSetValue() {
		return this.value != null;
	}

	public void setValueIsSet(boolean value) {
		if (!value) {
			this.value = null;
		}
	}

	public long getTimestamp() {
		return this.timestamp;
	}

	public Column setTimestamp(long timestamp) {
		this.timestamp = timestamp;
		setTimestampIsSet(true);
		return this;
	}

	public void unsetTimestamp() {
		__isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
	}

	// Returns true if field timestamp is set (has been asigned a value) and
	// false otherwise
	public boolean isSetTimestamp() {
		return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
	}

	public void setTimestampIsSet(boolean value) {
		__isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
	}

	public void setFieldValue(int fieldID, Object value) {
		switch (fieldID) {
		case NAME:
			if (value == null) {
				unsetName();
			} else {
				setName((byte[]) value);
			}
			break;

		case VALUE:
			if (value == null) {
				unsetValue();
			} else {
				setValue((byte[]) value);
			}
			break;

		case TIMESTAMP:
			if (value == null) {
				unsetTimestamp();
			} else {
				setTimestamp((Long) value);
			}
			break;

		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	public Object getFieldValue(int fieldID) {
		switch (fieldID) {
		case NAME:
			return getName();

		case VALUE:
			return getValue();

		case TIMESTAMP:
			return new Long(getTimestamp());

		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	// Returns true if field corresponding to fieldID is set (has been asigned a
	// value) and false otherwise
	public boolean isSet(int fieldID) {
		switch (fieldID) {
		case NAME:
			return isSetName();
		case VALUE:
			return isSetValue();
		case TIMESTAMP:
			return isSetTimestamp();
		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof Column)
			return this.equals((Column) that);
		return false;
	}

	public boolean equals(Column that) {
		if (that == null)
			return false;

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!java.util.Arrays.equals(this.name, that.name))
				return false;
		}

		boolean this_present_value = true && this.isSetValue();
		boolean that_present_value = true && that.isSetValue();
		if (this_present_value || that_present_value) {
			if (!(this_present_value && that_present_value))
				return false;
			if (!java.util.Arrays.equals(this.value, that.value))
				return false;
		}

		boolean this_present_timestamp = true;
		boolean that_present_timestamp = true;
		if (this_present_timestamp || that_present_timestamp) {
			if (!(this_present_timestamp && that_present_timestamp))
				return false;
			if (this.timestamp != that.timestamp)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(Column other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		Column typedOther = other;

		lastComparison = Boolean.valueOf(isSetName()).compareTo(isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		lastComparison = TBaseHelper.compareTo(name, typedOther.name);
		if (lastComparison != 0) {
			return lastComparison;
		}
		lastComparison = Boolean.valueOf(isSetValue()).compareTo(isSetValue());
		if (lastComparison != 0) {
			return lastComparison;
		}
		lastComparison = TBaseHelper.compareTo(value, typedOther.value);
		if (lastComparison != 0) {
			return lastComparison;
		}
		lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(isSetTimestamp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		lastComparison = TBaseHelper.compareTo(timestamp, typedOther.timestamp);
		if (lastComparison != 0) {
			return lastComparison;
		}
		return 0;
	}

	public void read(TProtocol iprot) throws TException {
		TField field;
		iprot.readStructBegin();
		while (true) {
			field = iprot.readFieldBegin();
			if (field.type == TType.STOP) {
				break;
			}
			switch (field.id) {
			case NAME:
				if (field.type == TType.STRING) {
					this.name = iprot.readBinary();
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case VALUE:
				if (field.type == TType.STRING) {
					this.value = iprot.readBinary();
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case TIMESTAMP:
				if (field.type == TType.I64) {
					this.timestamp = iprot.readI64();
					setTimestampIsSet(true);
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			default:
				TProtocolUtil.skip(iprot, field.type);
				break;
			}
			iprot.readFieldEnd();
		}
		iprot.readStructEnd();

		// check for required fields of primitive type, which can't be checked
		// in the validate method
		if (!isSetTimestamp()) {
			throw new TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
		}
		validate();
	}

	public void write(TProtocol oprot) throws TException {
		validate();

		oprot.writeStructBegin(STRUCT_DESC);
		if (this.name != null) {
			oprot.writeFieldBegin(NAME_FIELD_DESC);
			oprot.writeBinary(this.name);
			oprot.writeFieldEnd();
		}
		if (this.value != null) {
			oprot.writeFieldBegin(VALUE_FIELD_DESC);
			oprot.writeBinary(this.value);
			oprot.writeFieldEnd();
		}
		oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
		oprot.writeI64(this.timestamp);
		oprot.writeFieldEnd();
		oprot.writeFieldStop();
		oprot.writeStructEnd();
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Column(");
		boolean first = true;

		sb.append("name:");
		if (this.name == null) {
			sb.append("null");
		} else {
			int __name_size = Math.min(this.name.length, 128);
			for (int i = 0; i < __name_size; i++) {
				if (i != 0)
					sb.append(" ");
				sb.append(Integer.toHexString(this.name[i]).length() > 1 ? Integer.toHexString(this.name[i]).substring(Integer.toHexString(this.name[i]).length() - 2).toUpperCase() : "0"
						+ Integer.toHexString(this.name[i]).toUpperCase());
			}
			if (this.name.length > 128)
				sb.append(" ...");
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("value:");
		if (this.value == null) {
			sb.append("null");
		} else {
			int __value_size = Math.min(this.value.length, 128);
			for (int i = 0; i < __value_size; i++) {
				if (i != 0)
					sb.append(" ");
				sb.append(Integer.toHexString(this.value[i]).length() > 1 ? Integer.toHexString(this.value[i]).substring(Integer.toHexString(this.value[i]).length() - 2).toUpperCase() : "0"
						+ Integer.toHexString(this.value[i]).toUpperCase());
			}
			if (this.value.length > 128)
				sb.append(" ...");
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("timestamp:");
		sb.append(this.timestamp);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws TException {
		// check for required fields
		if (name == null) {
			throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
		}
		if (value == null) {
			throw new TProtocolException("Required field 'value' was not present! Struct: " + toString());
		}
		// alas, we cannot check 'timestamp' because it's a primitive and you
		// chose the non-beans generator.
		// check that fields of type enum have valid values
	}

}
