/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.service;

/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.meta_data.StructMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TList;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * A named list of columns.
 * 
 * @param name
 *            . see Column.name.
 * @param columns
 *            . A collection of standard Columns. The columns within a super
 *            column are defined in an adhoc manner. Columns within a super
 *            column do not have to have matching structures (similarly named
 *            child columns).
 */
public class SuperColumn implements TBase, java.io.Serializable, Cloneable, Comparable<SuperColumn> {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final TStruct STRUCT_DESC = new TStruct("SuperColumn");
	private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short) 1);
	private static final TField COLUMNS_FIELD_DESC = new TField("columns", TType.LIST, (short) 2);

	public byte[] name;
	public List<Column> columns;
	public static final int NAME = 1;
	public static final int COLUMNS = 2;

	// isset id assignments

	public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {
		/**
	 * 
	 */
		private static final long serialVersionUID = 1L;

		{
			put(NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED, new FieldValueMetaData(TType.STRING)));
			put(COLUMNS, new FieldMetaData("columns", TFieldRequirementType.REQUIRED, new ListMetaData(TType.LIST, new StructMetaData(TType.STRUCT, Column.class))));
		}
	});

	static {
		FieldMetaData.addStructMetaDataMap(SuperColumn.class, metaDataMap);
	}

	public SuperColumn() {
	}

	public SuperColumn(byte[] name, List<Column> columns) {
		this();
		this.name = name;
		this.columns = columns;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public SuperColumn(SuperColumn other) {
		if (other.isSetName()) {
			this.name = new byte[other.name.length];
			System.arraycopy(other.name, 0, name, 0, other.name.length);
		}
		if (other.isSetColumns()) {
			List<Column> __this__columns = new ArrayList<Column>();
			for (Column other_element : other.columns) {
				__this__columns.add(new Column(other_element));
			}
			this.columns = __this__columns;
		}
	}

	public SuperColumn deepCopy() {
		return new SuperColumn(this);
	}

	@Override
	@Deprecated
	public SuperColumn clone() {
		return new SuperColumn(this);
	}

	public byte[] getName() {
		return this.name;
	}

	public SuperColumn setName(byte[] name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	// Returns true if field name is set (has been asigned a value) and false
	// otherwise
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	public int getColumnsSize() {
		return (this.columns == null) ? 0 : this.columns.size();
	}

	public java.util.Iterator<Column> getColumnsIterator() {
		return (this.columns == null) ? null : this.columns.iterator();
	}

	public void addToColumns(Column elem) {
		if (this.columns == null) {
			this.columns = new ArrayList<Column>();
		}
		this.columns.add(elem);
	}

	public List<Column> getColumns() {
		return this.columns;
	}

	public SuperColumn setColumns(List<Column> columns) {
		this.columns = columns;
		return this;
	}

	public void unsetColumns() {
		this.columns = null;
	}

	// Returns true if field columns is set (has been asigned a value) and false
	// otherwise
	public boolean isSetColumns() {
		return this.columns != null;
	}

	public void setColumnsIsSet(boolean value) {
		if (!value) {
			this.columns = null;
		}
	}

	@SuppressWarnings("unchecked")
	public void setFieldValue(int fieldID, Object value) {
		switch (fieldID) {
		case NAME:
			if (value == null) {
				unsetName();
			} else {
				setName((byte[]) value);
			}
			break;

		case COLUMNS:
			if (value == null) {
				unsetColumns();
			} else {
				setColumns((List<Column>) value);
			}
			break;

		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	public Object getFieldValue(int fieldID) {
		switch (fieldID) {
		case NAME:
			return getName();

		case COLUMNS:
			return getColumns();

		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	// Returns true if field corresponding to fieldID is set (has been asigned a
	// value) and false otherwise
	public boolean isSet(int fieldID) {
		switch (fieldID) {
		case NAME:
			return isSetName();
		case COLUMNS:
			return isSetColumns();
		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof SuperColumn)
			return this.equals((SuperColumn) that);
		return false;
	}

	public boolean equals(SuperColumn that) {
		if (that == null)
			return false;

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!java.util.Arrays.equals(this.name, that.name))
				return false;
		}

		boolean this_present_columns = true && this.isSetColumns();
		boolean that_present_columns = true && that.isSetColumns();
		if (this_present_columns || that_present_columns) {
			if (!(this_present_columns && that_present_columns))
				return false;
			if (!this.columns.equals(that.columns))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(SuperColumn other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		SuperColumn typedOther = other;

		lastComparison = Boolean.valueOf(isSetName()).compareTo(isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		lastComparison = TBaseHelper.compareTo(name, typedOther.name);
		if (lastComparison != 0) {
			return lastComparison;
		}
		lastComparison = Boolean.valueOf(isSetColumns()).compareTo(isSetColumns());
		if (lastComparison != 0) {
			return lastComparison;
		}
		lastComparison = TBaseHelper.compareTo(columns, typedOther.columns);
		if (lastComparison != 0) {
			return lastComparison;
		}
		return 0;
	}

	public void read(TProtocol iprot) throws TException {
		TField field;
		iprot.readStructBegin();
		while (true) {
			field = iprot.readFieldBegin();
			if (field.type == TType.STOP) {
				break;
			}
			switch (field.id) {
			case NAME:
				if (field.type == TType.STRING) {
					this.name = iprot.readBinary();
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case COLUMNS:
				if (field.type == TType.LIST) {
					{
						TList _list0 = iprot.readListBegin();
						this.columns = new ArrayList<Column>(_list0.size);
						for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
							Column _elem2;
							_elem2 = new Column();
							_elem2.read(iprot);
							this.columns.add(_elem2);
						}
						iprot.readListEnd();
					}
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			default:
				TProtocolUtil.skip(iprot, field.type);
				break;
			}
			iprot.readFieldEnd();
		}
		iprot.readStructEnd();

		// check for required fields of primitive type, which can't be checked
		// in the validate method
		validate();
	}

	public void write(TProtocol oprot) throws TException {
		validate();

		oprot.writeStructBegin(STRUCT_DESC);
		if (this.name != null) {
			oprot.writeFieldBegin(NAME_FIELD_DESC);
			oprot.writeBinary(this.name);
			oprot.writeFieldEnd();
		}
		if (this.columns != null) {
			oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
			{
				oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
				for (Column _iter3 : this.columns) {
					_iter3.write(oprot);
				}
				oprot.writeListEnd();
			}
			oprot.writeFieldEnd();
		}
		oprot.writeFieldStop();
		oprot.writeStructEnd();
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("SuperColumn(");
		boolean first = true;

		sb.append("name:");
		if (this.name == null) {
			sb.append("null");
		} else {
			int __name_size = Math.min(this.name.length, 128);
			for (int i = 0; i < __name_size; i++) {
				if (i != 0)
					sb.append(" ");
				sb.append(Integer.toHexString(this.name[i]).length() > 1 ? Integer.toHexString(this.name[i]).substring(Integer.toHexString(this.name[i]).length() - 2).toUpperCase() : "0"
						+ Integer.toHexString(this.name[i]).toUpperCase());
			}
			if (this.name.length > 128)
				sb.append(" ...");
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("columns:");
		if (this.columns == null) {
			sb.append("null");
		} else {
			sb.append(this.columns);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws TException {
		// check for required fields
		if (name == null) {
			throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
		}
		if (columns == null) {
			throw new TProtocolException("Required field 'columns' was not present! Struct: " + toString());
		}
		// check that fields of type enum have valid values
	}

}
