/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.service;

/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * Invalid request could mean keyspace or column family does not exist, required
 * parameters are missing, or a parameter is malformed. why contains an
 * associated error message.
 */
public class InvalidRequestException extends Exception implements TBase, java.io.Serializable, Cloneable, Comparable<InvalidRequestException> {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final TStruct STRUCT_DESC = new TStruct("InvalidRequestException");
	private static final TField WHY_FIELD_DESC = new TField("why", TType.STRING, (short) 1);

	public String why;
	public static final int WHY = 1;

	// isset id assignments

	public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {
		/**
	 * 
	 */
		private static final long serialVersionUID = 1L;

		{
			put(WHY, new FieldMetaData("why", TFieldRequirementType.REQUIRED, new FieldValueMetaData(TType.STRING)));
		}
	});

	static {
		FieldMetaData.addStructMetaDataMap(InvalidRequestException.class, metaDataMap);
	}

	public InvalidRequestException() {
	}

	public InvalidRequestException(String why) {
		this();
		this.why = why;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public InvalidRequestException(InvalidRequestException other) {
		if (other.isSetWhy()) {
			this.why = other.why;
		}
	}

	public InvalidRequestException deepCopy() {
		return new InvalidRequestException(this);
	}

	@Override
	@Deprecated
	public InvalidRequestException clone() {
		return new InvalidRequestException(this);
	}

	public String getWhy() {
		return this.why;
	}

	public InvalidRequestException setWhy(String why) {
		this.why = why;
		return this;
	}

	public void unsetWhy() {
		this.why = null;
	}

	// Returns true if field why is set (has been asigned a value) and false
	// otherwise
	public boolean isSetWhy() {
		return this.why != null;
	}

	public void setWhyIsSet(boolean value) {
		if (!value) {
			this.why = null;
		}
	}

	public void setFieldValue(int fieldID, Object value) {
		switch (fieldID) {
		case WHY:
			if (value == null) {
				unsetWhy();
			} else {
				setWhy((String) value);
			}
			break;

		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	public Object getFieldValue(int fieldID) {
		switch (fieldID) {
		case WHY:
			return getWhy();

		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	// Returns true if field corresponding to fieldID is set (has been asigned a
	// value) and false otherwise
	public boolean isSet(int fieldID) {
		switch (fieldID) {
		case WHY:
			return isSetWhy();
		default:
			throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
		}
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof InvalidRequestException)
			return this.equals((InvalidRequestException) that);
		return false;
	}

	public boolean equals(InvalidRequestException that) {
		if (that == null)
			return false;

		boolean this_present_why = true && this.isSetWhy();
		boolean that_present_why = true && that.isSetWhy();
		if (this_present_why || that_present_why) {
			if (!(this_present_why && that_present_why))
				return false;
			if (!this.why.equals(that.why))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(InvalidRequestException other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		InvalidRequestException typedOther = other;

		lastComparison = Boolean.valueOf(isSetWhy()).compareTo(isSetWhy());
		if (lastComparison != 0) {
			return lastComparison;
		}
		lastComparison = TBaseHelper.compareTo(why, typedOther.why);
		if (lastComparison != 0) {
			return lastComparison;
		}
		return 0;
	}

	public void read(TProtocol iprot) throws TException {
		TField field;
		iprot.readStructBegin();
		while (true) {
			field = iprot.readFieldBegin();
			if (field.type == TType.STOP) {
				break;
			}
			switch (field.id) {
			case WHY:
				if (field.type == TType.STRING) {
					this.why = iprot.readString();
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			default:
				TProtocolUtil.skip(iprot, field.type);
				break;
			}
			iprot.readFieldEnd();
		}
		iprot.readStructEnd();

		// check for required fields of primitive type, which can't be checked
		// in the validate method
		validate();
	}

	public void write(TProtocol oprot) throws TException {
		validate();

		oprot.writeStructBegin(STRUCT_DESC);
		if (this.why != null) {
			oprot.writeFieldBegin(WHY_FIELD_DESC);
			oprot.writeString(this.why);
			oprot.writeFieldEnd();
		}
		oprot.writeFieldStop();
		oprot.writeStructEnd();
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("InvalidRequestException(");
		sb.append("why:");
		if (this.why == null) {
			sb.append("null");
		} else {
			sb.append(this.why);
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws TException {
		// check for required fields
		if (why == null) {
			throw new TProtocolException("Required field 'why' was not present! Struct: " + toString());
		}
		// check that fields of type enum have valid values
	}

}
